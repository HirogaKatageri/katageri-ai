// Mocks generated by Mockito 5.4.6 from annotations
// in katageri_ai/test/clients/gemini_client_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:http/http.dart' as _i2;
import 'package:katageri_ai/src/utils/http_client.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResponse_1 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SparrowHttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockSparrowHttpClient extends _i1.Mock implements _i3.SparrowHttpClient {
  @override
  _i2.Client get client =>
      (super.noSuchMethod(
            Invocation.getter(#client),
            returnValue: _FakeClient_0(this, Invocation.getter(#client)),
            returnValueForMissingStub: _FakeClient_0(
              this,
              Invocation.getter(#client),
            ),
          )
          as _i2.Client);

  @override
  bool get isDisposed =>
      (super.noSuchMethod(
            Invocation.getter(#isDisposed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  String get host =>
      (super.noSuchMethod(
            Invocation.getter(#host),
            returnValue: _i4.dummyValue<String>(this, Invocation.getter(#host)),
            returnValueForMissingStub: _i4.dummyValue<String>(
              this,
              Invocation.getter(#host),
            ),
          )
          as String);

  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(
            Invocation.getter(#headers),
            returnValue: <String, String>{},
            returnValueForMissingStub: <String, String>{},
          )
          as Map<String, String>);

  @override
  set isDisposed(bool? _isDisposed) => super.noSuchMethod(
    Invocation.setter(#isDisposed, _isDisposed),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<_i2.Response> post({
    required String? path,
    Object? body,
    Map<String, String>? headers,
    Map<String, String>? queryParams,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#post, [], {
              #path: path,
              #body: body,
              #headers: headers,
              #queryParams: queryParams,
            }),
            returnValue: _i5.Future<_i2.Response>.value(
              _FakeResponse_1(
                this,
                Invocation.method(#post, [], {
                  #path: path,
                  #body: body,
                  #headers: headers,
                  #queryParams: queryParams,
                }),
              ),
            ),
            returnValueForMissingStub: _i5.Future<_i2.Response>.value(
              _FakeResponse_1(
                this,
                Invocation.method(#post, [], {
                  #path: path,
                  #body: body,
                  #headers: headers,
                  #queryParams: queryParams,
                }),
              ),
            ),
          )
          as _i5.Future<_i2.Response>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
